This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
Archive/
  PricingCTA.tsx
  TestimonialCarousel.tsx
prisma/
  schema.prisma
scripts/
  deploy
src/
  app/
    api/
      trpc/
        [trpc]/
          route.ts
    signup/
      page.tsx
    layout.tsx
    page.tsx
  components/
    DashboardMockup.tsx
    EnhancedDashboard.tsx
    PricingCTA.tsx
    TestimonialCarousel.tsx
  lib/
    validations/
      auth.ts
  server/
    api/
      procedures/
        auth/
          signup.ts
      root.ts
      trpc.ts
    db.ts
  styles/
    globals.css
  trpc/
    query-client.ts
    react.tsx
    server.ts
  env.js
.gitignore
next.config.js
package.json
postcss.config.cjs
prettier.config.js
tailwind.config.ts
tsconfig.json

================================================================
Files
================================================================

================
File: Archive/PricingCTA.tsx
================
"use client";

import React from 'react';
import { Check, Shield, Users } from 'lucide-react';

const plans = [
  {
    name: "Basic",
    price: "$10",
    period: "monthly",
    description: "Essential tools for personal retirement planning",
    features: [
      "Personal retirement dashboard",
      "Basic retirement calculator",
      "Educational resources",
      "Mobile app access"
    ],
    highlighted: false,
    buttonText: "Get Started"
  },
  {
    name: "Family Plus",
    price: "$15",
    period: "monthly",
    description: "Perfect for managing your family's retirement journey",
    features: [
      "Everything in Basic",
      "Family dashboard with parent accounts",
      "Advanced planning tools",
      "Automated monthly reports",
      "Priority customer support"
    ],
    highlighted: true,
    buttonText: "Start Free Trial",
    badge: "Most Popular"
  },
  {
    name: "Family Pro",
    price: "$20",
    period: "monthly",
    description: "Complete solution for comprehensive family planning",
    features: [
      "Everything in Family Plus",
      "Multiple customized account views",
      "Support for parents and dependents",
      "Estate planning tools",
      "Dedicated family advisor"
    ],
    highlighted: false,
    buttonText: "Contact Sales"
  }
];

const PricingCTA: React.FC = () => {
  return (
    <section className="bg-gradient-to-b from-white to-emerald-50 py-20">
      <div className="container mx-auto px-4">
        {/* Pricing Grid - Now Horizontal */}
        <div className="mb-16 flex max-w-7xl flex-col gap-8 px-4 md:flex-row">
          {plans.map((plan) => (
            <div 
              key={plan.name}
              className={`relative flex flex-1 flex-col rounded-2xl p-8 transition-all duration-300 ${
                plan.highlighted 
                  ? 'border-2 border-emerald-500 bg-emerald-50 transform hover:-translate-y-1 hover:shadow-[0_0_30px_rgba(16,185,129,0.2)]' 
                  : 'border border-gray-200 bg-white hover:shadow-lg'
              }`}
            >
              {plan.badge && (
                <div className="absolute -top-4 left-1/2 -translate-x-1/2">
                  <span className="rounded-full bg-emerald-600 px-3 py-1 text-sm text-white">
                    {plan.badge}
                  </span>
                </div>
              )}

              <div className="text-center">
                <h3 className="mb-2 text-xl font-bold text-gray-900">{plan.name}</h3>
                <div className="mb-4">
                  <span className="text-4xl font-bold text-gray-900">{plan.price}</span>
                  <span className="text-gray-600">{plan.period && `/${plan.period}`}</span>
                </div>
                <p className="mb-6 text-gray-600">{plan.description}</p>
              </div>
              
              <ul className="mb-8 flex-grow space-y-4">
                {plan.features.map((feature, idx) => (
                  <li key={idx} className="flex items-start gap-2">
                    <Check className="mt-0.5 h-5 w-5 flex-shrink-0 text-emerald-600" />
                    <span className="text-gray-600">{feature}</span>
                  </li>
                ))}
              </ul>

              <button 
                className={`w-full rounded-lg px-6 py-3 transition-all duration-300 ${
                  plan.highlighted
                    ? 'bg-emerald-600 text-white transform hover:scale-105 hover:bg-emerald-700'
                    : 'bg-gray-900 text-white hover:bg-gray-800'
                }`}
              >
                {plan.buttonText}
              </button>
            </div>
          ))}
        </div>

        {/* Additional CTAs */}
        <div className="mx-auto flex max-w-4xl flex-col gap-8 md:flex-row">
          <div className="flex-1 rounded-xl bg-white p-6 text-center transition-shadow hover:shadow-lg">
            <div className="mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-emerald-100">
              <Users className="h-6 w-6 text-emerald-600" />
            </div>
            <h3 className="mb-2 text-lg font-semibold">Schedule a Family Demo</h3>
            <p className="mb-4 text-gray-600">See how NestWise can help your entire family plan for the future.</p>
            <button className="font-semibold text-emerald-600 hover:text-emerald-700">
              Book a Demo →
            </button>
          </div>

          <div className="flex-1 rounded-xl bg-white p-6 text-center transition-shadow hover:shadow-lg">
            <div className="mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-emerald-100">
              <Shield className="h-6 w-6 text-emerald-600" />
            </div>
            <h3 className="mb-2 text-lg font-semibold">Free Resource Center</h3>
            <p className="mb-4 text-gray-600">Access our library of retirement planning guides and tools.</p>
            <button className="font-semibold text-emerald-600 hover:text-emerald-700">
              View Resources →
            </button>
          </div>
        </div>
      </div>
    </section>
  );
};

export default PricingCTA;

================
File: Archive/TestimonialCarousel.tsx
================
"use client";

import { ChevronLeft, ChevronRight } from "lucide-react";
import { useState, useEffect } from "react";

interface Testimonial {
  text: string;
  author: string;
  role: string;
}

const testimonials: Testimonial[] = [
  {
    text: "NestWise helped me understand exactly how much support my parents might need. Now I can plan for both our futures with confidence.",
    author: "Sarah M.",
    role: "Software Engineer"
  },
  {
    text: "The dashboard makes it so easy to track both my retirement goals and my parents'. It's like having a financial advisor in my pocket.",
    author: "Michael L.",
    role: "Marketing Director"
  },
  {
    text: "Setting up retirement accounts for my parents was seamless. NestWise guided me through every step of the process.",
    author: "David K.",
    role: "Healthcare Professional"
  },
  {
    text: "Finally found a platform that understands the unique challenges of managing both my retirement and my parents'. The insights are invaluable.",
    author: "Jennifer R.",
    role: "Project Manager"
  },
  {
    text: "The ability to see both retirement plans side by side has made family financial discussions so much easier and more productive.",
    author: "Robert T.",
    role: "Small Business Owner"
  },
  {
    text: "The educational resources helped me make informed decisions about long-term care planning for my parents while balancing my own goals.",
    author: "Lisa M.",
    role: "Education Consultant"
  },
  {
    text: "NestWise's retirement calculator gave us a clear picture of where we stand and what steps we need to take next.",
    author: "James W.",
    role: "Sales Director"
  },
  {
    text: "As someone supporting both children and parents, NestWise has been crucial in helping me balance multiple financial responsibilities.",
    author: "Patricia H.",
    role: "HR Manager"
  },
  {
    text: "The platform's family sharing features make it easy to collaborate with my siblings on our parents' retirement planning.",
    author: "Thomas N.",
    role: "Financial Analyst"
  },
  {
    text: "Being able to model different scenarios has helped us prepare for various retirement possibilities. Extremely useful tool!",
    author: "Michelle K.",
    role: "Operations Manager"
  },
  {
    text: "The mobile app keeps me connected to our family's retirement progress wherever I am. Love the instant notifications!",
    author: "Daniel P.",
    role: "Technology Consultant"
  },
  {
    text: "NestWise made it simple to consolidate and track multiple retirement accounts. The peace of mind is priceless.",
    author: "Rachel S.",
    role: "Healthcare Administrator"
  },
  {
    text: "The platform's recommendations have helped us optimize our retirement strategies and reduce unnecessary fees.",
    author: "Kevin L.",
    role: "Research Scientist"
  }
];

export const TestimonialCarousel: React.FC = () => {
  const [current, setCurrent] = useState(0);

  const next = () => setCurrent(prev => (prev + 1) % testimonials.length);
  const prev = () => setCurrent(prev => (prev - 1 + testimonials.length) % testimonials.length);

  useEffect(() => {
    const timer = setInterval(next, 5000);
    return () => clearInterval(timer);
  }, []); // Remove current from dependencies to avoid unnecessary interval resets

  return (
    <div className="relative mx-auto w-full max-w-4xl px-4 py-12">
      <div className="rounded-2xl bg-white p-8 shadow-lg">
        <div className="relative h-48">
          {testimonials.map((testimonial, idx) => (
            <div
              key={`${testimonial.author}-${idx}`}
              className={`absolute w-full transition-all duration-500 ${
                idx === current ? "translate-x-0 opacity-100" : "translate-x-8 opacity-0"
              }`}
            >
              <p className="mb-4 text-lg italic text-gray-700">{testimonial.text}</p>
              <div className="font-semibold text-emerald-700">{testimonial.author}</div>
              <div className="text-sm text-gray-500">{testimonial.role}</div>
            </div>
          ))}
        </div>
        <div className="mt-6 flex justify-center gap-4">
          <button
            onClick={prev}
            className="rounded-full p-2 text-emerald-700 transition-colors hover:bg-emerald-50"
            aria-label="Previous testimonial"
          >
            <ChevronLeft className="h-6 w-6" />
          </button>
          <button
            onClick={next}
            className="rounded-full p-2 text-emerald-700 transition-colors hover:bg-emerald-50"
            aria-label="Next testimonial"
          >
            <ChevronRight className="h-6 w-6" />
          </button>
        </div>
      </div>
    </div>
  );
};

================
File: prisma/schema.prisma
================
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String?
  createdAt DateTime @default(now())
}

// Prisma doesn't allow having a schema with no models
// remove this when you add real models
model ExampleModel {
  id Int @id @default(autoincrement())
  createdAt  DateTime @default(now())
  someString String
}

================
File: scripts/deploy
================
#!/bin/bash

set -e
cd `dirname $0`
cd .. # to get out of `scripts` directory

SSH_HOST=root@trynestwise.com

ssh "$SSH_HOST" "systemctl stop nestwise" || true
rsync -v -a --delete-after --delete-excluded --exclude='node_modules' --exclude='.git' --exclude='dist' --exclude='.next' --exclude='node_modules' --exclude='*.env' --exclude=".turbo" ./ "$SSH_HOST":nestwise/
scp ./prod.env "$SSH_HOST":nestwise/.env
ssh "$SSH_HOST" "
  echo '
    [Unit]
    Description=nestwise
    After=docker.service
    Requires=docker.service

    [Service]
    Type=oneshot
    WorkingDirectory=/root/nestwise
    Environment=PATH=/root/.local/share/pnpm:$PATH
    ExecStart=npx codapt start
    ExecStop=/usr/bin/docker stop nestwise
    RemainAfterExit=yes

    [Install]
    WantedBy=multi-user.target
  ' > /etc/systemd/system/nestwise.service
  systemctl daemon-reload
  systemctl enable nestwise
  systemctl start nestwise
"

echo 'TEMP: tailing nestwise logs'
ssh "$SSH_HOST" "docker logs -n 300 -f nestwise"

================
File: src/app/api/trpc/[trpc]/route.ts
================
import { fetchRequestHandler } from "@trpc/server/adapters/fetch";
import { NextRequest } from "next/server";

import { env } from "@/env";
import { appRouter } from "@/server/api/root";
import { createTRPCContext } from "@/server/api/trpc";

/**
 * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when
 * handling a HTTP request (e.g. when you make requests from Client Components).
 */
const createContext = async (req: NextRequest) => {
  return createTRPCContext({
    headers: req.headers,
  });
};

const handler = (req: NextRequest) =>
  fetchRequestHandler({
    endpoint: "/api/trpc",
    req,
    router: appRouter,
    createContext: () => createContext(req),
    onError:
      env.NODE_ENV === "development"
        ? ({ path, error }) => {
            console.error(
              `❌ tRPC failed on ${path ?? "<no-path>"}: ${error.message}`,
            );
          }
        : undefined,
  });

export { handler as GET, handler as POST };

================
File: src/app/signup/page.tsx
================
"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import Link from "next/link";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { useCookies } from "react-cookie";
import toast from "react-hot-toast";

import { signupSchema, type SignupInput } from "@/lib/validations/auth";
import { api } from "@/trpc/react";

export default function SignupPage() {
  const router = useRouter();
  const [, setCookie] = useCookies<"authToken", { authToken?: string }>(["authToken"]);
  const [phoneInput, setPhoneInput] = useState<string>("");

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<SignupInput>({
    resolver: zodResolver(signupSchema),
    defaultValues: {
      phone: undefined
    }
  });

  const signupMutation = api.signup.useMutation({
    onSuccess: ({ token }) => {
      console.log("Signup successful, setting token cookie");
      // Set the auth token cookie
      setCookie("authToken", token, {
        path: "/",
        expires: new Date(Date.now() + 1000 * 60 * 60 * 24 * 365), // 1 year
      });

      // Show success message
      toast.success("Account created successfully!");

      // Redirect to home page
      router.push("/");
    },
    onError: (error) => {
      console.error("Signup mutation error:", error);
      // Show error message
      toast.error(error.message || "Failed to create account");
    },
  });

  const onSubmit = async (data: SignupInput) => {
    console.log("Form submitted with data:", data);
    console.log("Phone input value:", phoneInput);
    console.log("Phone value in data:", data.phone === undefined ? "undefined" : `"${data.phone}"`);
    
    // Create a copy of the data with phone explicitly set to undefined if empty
    const submissionData = {
      ...data,
      phone: phoneInput === "" ? undefined : phoneInput
    };
    
    console.log("Submission data:", submissionData);
    
    try {
      await signupMutation.mutateAsync(submissionData);
    } catch (error) {
      console.error("Signup error:", error);
      // Error is handled by the mutation's onError callback
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50 px-4 py-8 sm:px-6 sm:py-12">
      <div className="w-full max-w-md rounded-lg bg-white p-6 shadow-md sm:p-8">
        <div className="mx-auto max-w-md">
          <div className="mb-6 flex justify-center sm:mb-8">
            <Image
              src="/nestwise-w-text.png"
              alt="nestwise Logo"
              width={180}
              height={60}
              priority
              className="w-32 sm:w-36 md:w-[180px]"
            />
          </div>

          <h1 className="mb-3 text-center text-xl font-bold text-gray-900 sm:mb-4 sm:text-2xl">
            Join the Waitlist
          </h1>

          <p className="mb-6 text-center text-sm text-gray-600 sm:mb-8 sm:text-base">
            Thanks for your interest in nestwise. Sign up below for early access to our retirement planning platform designed for families.
          </p>

          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4 sm:space-y-6">
            <div>
              <label
                htmlFor="name"
                className="mb-1 block text-sm font-medium text-gray-700"
              >
                Name <span className="text-red-500">*</span>
              </label>
              <input
                id="name"
                type="text"
                {...register("name")}
                className="w-full rounded-md border border-gray-300 px-3 py-2 focus:border-emerald-500 focus:outline-none focus:ring-1 focus:ring-emerald-500"
                placeholder="Enter your name"
              />
              {errors.name && (
                <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
              )}
            </div>

            <div>
              <label
                htmlFor="email"
                className="mb-1 block text-sm font-medium text-gray-700"
              >
                Email <span className="text-red-500">*</span>
              </label>
              <input
                id="email"
                type="email"
                {...register("email")}
                className="w-full rounded-md border border-gray-300 px-3 py-2 focus:border-emerald-500 focus:outline-none focus:ring-1 focus:ring-emerald-500"
                placeholder="Enter your email"
              />
              {errors.email && (
                <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
              )}
            </div>

            <div>
              <label
                htmlFor="phone"
                className="mb-1 block text-sm font-medium text-gray-700"
              >
                Phone Number
              </label>
              <input
                id="phone"
                type="tel"
                {...register("phone", { 
                  required: false,
                  value: phoneInput === "" ? undefined : phoneInput,
                  onChange: (e) => setPhoneInput(e.target.value)
                })}
                value={phoneInput}
                onChange={(e) => setPhoneInput(e.target.value)}
                className="w-full rounded-md border border-gray-300 px-3 py-2 focus:border-emerald-500 focus:outline-none focus:ring-1 focus:ring-emerald-500"
                placeholder="Enter your phone number (optional)"
              />
              {errors.phone && (
                <p className="mt-1 text-sm text-red-600">{errors.phone.message}</p>
              )}
            </div>

            <button
              type="submit"
              disabled={isSubmitting || signupMutation.isPending}
              className="w-full rounded-lg bg-emerald-600 px-4 py-2.5 text-sm font-medium text-white shadow-md transition-all duration-200 hover:bg-emerald-700 hover:shadow-xl active:scale-95 disabled:bg-emerald-400 sm:py-3 sm:text-base"
            >
              {isSubmitting || signupMutation.isPending ? "Joining Waitlist..." : "Join Waitlist"}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/layout.tsx
================
import "@/styles/globals.css";

import { GeistSans } from "geist/font/sans";
import { Metadata } from "next";
import { Toaster } from "react-hot-toast";

import { TRPCReactProvider } from "@/trpc/react";

export const metadata: Metadata = {
  title: "nestwise",
  description: "",
  icons: [
    { rel: "icon", url: "/nestwise-logo-no-text.png", type: "image/png" },
    { rel: "apple-touch-icon", url: "/nestwise-logo-no-text.png" }
  ],
};

export default function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  return (
    <html lang="en" className={`${GeistSans.variable}`}>
      <body>
        <TRPCReactProvider>
          {children}
          <Toaster />
        </TRPCReactProvider>
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
"use client";

import { BarChart2, Shield, Users, Compass, Target, LucideCode, LineChart, PiggyBank, Calendar, BookOpen, MessageSquare, CreditCard, TrendingUp } from "lucide-react";
import Image from "next/image";
import { type NextPage } from "next";
import { useInView } from "react-intersection-observer";
import { useEffect, useRef, useState } from "react";
import Link from "next/link";

import EnhancedDashboard from "@/components/EnhancedDashboard";

const Home: NextPage = () => {
  const { ref, inView } = useInView({
    threshold: 0.1,
    triggerOnce: true,
  });

  // Animation words arrays for each benefit section
  const protectWords = ["Protect", "Safeguard", "Secure", "Shield", "Defend"];
  const understandWords = ["Understand", "Analyze", "Assess", "Evaluate", "Comprehend"];
  const planWords = ["Plan", "Prepare", "Strategize", "Organize", "Design"];

  // State to track current words
  const [protectWord, setProtectWord] = useState(protectWords[0]);
  const [understandWord, setUnderstandWord] = useState(understandWords[0]);
  const [planWord, setPlanWord] = useState(planWords[0]);

  // Effect for cycling through words
  useEffect(() => {
    let protectIndex = 0;
    let understandIndex = 0;
    let planIndex = 0;

    const interval = setInterval(() => {
      // Update protect word
      protectIndex = (protectIndex + 1) % protectWords.length;
      setProtectWord(protectWords[protectIndex]);

      // Delay other word changes slightly for visual effect
      setTimeout(() => {
        understandIndex = (understandIndex + 1) % understandWords.length;
        setUnderstandWord(understandWords[understandIndex]);
      }, 1000);

      setTimeout(() => {
        planIndex = (planIndex + 1) % planWords.length;
        setPlanWord(planWords[planIndex]);
      }, 2000);
    }, 3000);

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    if (inView) {
      const animatedElements = document.querySelectorAll('[data-animate="true"]');
      animatedElements.forEach((element) => {
        element.classList.remove('opacity-0', 'translate-y-4');
      });
    }
  }, [inView]);

  // Animation threshold options for better control
  const animationOptions = {
    threshold: 0.15,
    triggerOnce: true,
    rootMargin: "0px 0px -50px 0px"
  };

  // Helper function to convert percentage to simplified fraction
  const percentToFraction = (percent: number): string => {
    if (percent === 25) return "1/4";
    if (percent === 50) return "1/2";
    if (percent === 75) return "3/4";
    if (percent === 20) return "1/5";
    if (percent === 40) return "2/5";
    if (percent === 60) return "3/5";
    if (percent === 80) return "4/5";
    if (percent === 30) return "3/10";
    if (percent === 70) return "7/10";
    if (percent === 90) return "9/10";
    if (percent === 100) return "Complete";
    return `${percent}%`;
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navigation Bar */}
      <div className="bg-white px-3 py-3 shadow-sm sm:px-4 sm:py-4">
        <div className="container mx-auto flex items-center justify-between">
          <div className="flex items-center">
            <Image
              src="/nestwise-w-text.png"
              alt="nestwise Logo"
              width={180}
              height={60}
              priority
              className="w-36 sm:w-44 md:w-[180px]"
            />
          </div>
          <div className="flex items-center gap-4">
            {/* CTA button removed */}
          </div>
        </div>
      </div>

      {/* Hero Section */}
<section className="relative bg-gradient-to-b from-emerald-50 to-white">
  <div className="container mx-auto px-3 py-6 sm:px-4 sm:py-12 lg:py-24">
    <div className="mx-auto grid grid-cols-1 items-center gap-4 sm:gap-8 lg:grid-cols-2 lg:gap-12">
      {/* Left Column - Text Content */}
      <div className="order-2 lg:order-1 text-center sm:text-left">
        <h1 className="mb-3 text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl lg:mb-6 lg:text-5xl">
          <span className="inline md:inline">Secure your</span>{" "}
          <span className="block md:inline font-semibold text-emerald-700">Parents&apos; Financial Future</span>
        </h1>
        <p className="mb-4 text-base leading-relaxed text-gray-600 sm:text-lg lg:mb-8 lg:text-xl">
          Understand your family&apos;s retirement journey all in one platform. Open accounts, set goals, and monitor progress towards financial security.
        </p>
        <div className="hidden sm:flex w-full justify-center sm:justify-start">
          <Link
            href="/signup"
            className="w-full rounded-lg bg-emerald-600 px-4 py-2.5 text-sm font-medium text-white shadow-md transition-all duration-200 hover:bg-emerald-700 hover:shadow-xl active:scale-95 sm:w-auto sm:px-8 sm:py-3 sm:text-base"
          >
            Join the waitlist
          </Link>
        </div>
      </div>

      {/* Right Column - Image */}
      <div className="order-1 lg:order-2 mt-0 mb-6 lg:mb-0 lg:mt-0 flex justify-center lg:justify-end">
        <div className="relative h-48 w-full max-w-xs rounded-lg bg-gray-200 sm:h-64 sm:max-w-sm lg:h-96 lg:max-w-lg">
          <Image
            src="/parents-w-daughter-cropped.jpeg"
            alt="Retirement Planning Illustration"
            fill
            className="rounded-lg object-cover"
            sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
            priority
            quality={90}
          />
        </div>
      </div>
    </div>
  </div>
</section>

{/* Mobile-only CTA Button */}
{/* <section className="py-6 bg-white block sm:hidden">
  <div className="container mx-auto px-4">
    <div className="flex justify-center">
      <Link
        href="/signup"
        className="w-full rounded-lg bg-emerald-600 px-4 py-2.5 text-sm font-medium text-white shadow-md transition-all duration-200 hover:bg-emerald-700 hover:shadow-xl active:scale-95"
      >
        Join the Waitlist
      </Link>
    </div>
  </div>
</section> */}
      <section className="py-6 bg-white sm:hidden">
        <div className="container mx-auto px-4">
          <div className="flex justify-center">
            <Link
              href="/signup"
              className="rounded-lg bg-emerald-600 px-6 py-3 text-base font-medium text-white shadow-md transition-all duration-300 hover:bg-emerald-700 hover:shadow-lg active:scale-95"
            >
              Join the Waitlist
            </Link>
          </div>
        </div>
      </section>

      {/* Key Benefits Section - Responsive Design */}
      <section className="py-12 sm:py-16 bg-white">
        <div className="container mx-auto px-4">
          <div className="text-center mb-10 sm:mb-12">
            <h2 className="text-4xl font-bold text-gray-900 mb-3 sm:mb-4">What is nestwise?</h2>
            <p className="text-base sm:text-lg md:text-xl text-gray-600 max-w-3xl mx-auto">
              AI-powered financial planning for first-generation wealth builders balancing personal goals with family responsibilities.
            </p>
            <p className="text-base sm:text-lg md:text-xl text-gray-600 mt-3 sm:mt-4">nestwise helps you...</p>
          </div>

          {/* Mobile View (Card Layout) - Visible only on small screens */}
          <div className="grid grid-cols-1 gap-6 md:hidden">
            {/* Benefit 1 - Mobile */}
            <div className="bg-white p-5 rounded-lg shadow-sm border border-gray-100 transition-all duration-300 hover:shadow-md hover:border-emerald-200 transform hover:-translate-y-1">
              <div className="mb-4 flex justify-center">
                <Shield className="h-16 w-16 text-emerald-600 p-3 bg-emerald-100 rounded-full" />
              </div>
              <h3 className="text-xl font-bold mb-2 text-center">
                <span className="text-emerald-600 transition-all duration-500">{protectWord}</span> your family's future
              </h3>
              <p className="text-base text-gray-600 text-center">
                ...by identifying when your parents may need financial support and planning accordingly.
              </p>
            </div>

            {/* Benefit 2 - Mobile */}
            <div className="bg-white p-5 rounded-lg shadow-sm border border-gray-100 transition-all duration-300 hover:shadow-md hover:border-emerald-200 transform hover:-translate-y-1">
              <div className="mb-4 flex justify-center">
                <LineChart className="h-16 w-16 text-emerald-600 p-3 bg-emerald-100 rounded-full" />
              </div>
              <h3 className="text-xl font-bold mb-2 text-center">
                <span className="text-emerald-600 transition-all duration-500">{understandWord}</span> your dual-generation situation
              </h3>
              <p className="text-base text-gray-600 text-center">
                ...by assessing how savings, pensions, social security, and insurance will cover your parents' retirement.
              </p>
            </div>

            {/* Benefit 3 - Mobile */}
            <div className="bg-white p-5 rounded-lg shadow-sm border border-gray-100 transition-all duration-300 hover:shadow-md hover:border-emerald-200 transform hover:-translate-y-1">
              <div className="mb-4 flex justify-center">
                <PiggyBank className="h-16 w-16 text-emerald-600 p-3 bg-emerald-100 rounded-full" />
              </div>
              <h3 className="text-xl font-bold mb-2 text-center">
                <span className="text-emerald-600 transition-all duration-500">{planWord}</span> for the retirement you both deserve
              </h3>
              <p className="text-base text-gray-600 text-center">
                ...by balancing resources to secure both your future and your parents' needs.
              </p>
            </div>
          </div>

          {/* Desktop View (Original Layout) - Visible only on medium screens and up */}
          <div className="hidden md:block">
            {/* Benefit 1 - Desktop */}
            <div className="max-w-6xl mx-auto mb-12 sm:mb-20">
              <div className="flex flex-row items-center gap-8">
                <div className="w-1/3 flex justify-center">
                  <Shield className="h-24 w-24 text-emerald-600 p-5 bg-emerald-100 rounded-full" />
                </div>
                <div className="w-2/3 text-left">
                  <h3 className="text-3xl md:text-4xl font-bold mb-3">
                    <span className="text-emerald-600 transition-all duration-500">{protectWord}</span> your family's future
                  </h3>
                  <p className="text-lg md:text-xl text-gray-600">
                    ...by identifying when your parents may need financial support and planning accordingly.
                  </p>
                </div>
              </div>
            </div>

            {/* Benefit 2 - Desktop */}
            <div className="max-w-6xl mx-auto mb-12 sm:mb-20">
              <div className="flex flex-row-reverse items-center gap-8">
                <div className="w-1/3 flex justify-center">
                  <LineChart className="h-24 w-24 text-emerald-600 p-5 bg-emerald-100 rounded-full" />
                </div>
                <div className="w-2/3 text-right">
                  <h3 className="text-3xl md:text-4xl font-bold mb-3">
                    <span className="text-emerald-600 transition-all duration-500">{understandWord}</span> your dual-generation situation
                  </h3>
                  <p className="text-lg md:text-xl text-gray-600">
                    ...by assessing how savings, pensions, social security, and insurance will cover your parents' retirement.
                  </p>
                </div>
              </div>
            </div>

            {/* Benefit 3 - Desktop */}
            <div className="max-w-6xl mx-auto">
              <div className="flex flex-row items-center gap-8">
                <div className="w-1/3 flex justify-center">
                  <PiggyBank className="h-24 w-24 text-emerald-600 p-5 bg-emerald-100 rounded-full" />
                </div>
                <div className="w-2/3 text-left">
                  <h3 className="text-3xl md:text-4xl font-bold mb-3">
                    <span className="text-emerald-600 transition-all duration-500">{planWord}</span> for the retirement you both deserve
                  </h3>
                  <p className="text-lg md:text-xl text-gray-600">
                    ...by balancing resources to secure both your future and your parents' needs.
                  </p>
                    </div>
                  </div>
            </div>
          </div>
        </div>
      </section>

      {/* How nestwise Works Section - MOVED UP */}
            {(() => {
        const { ref: howRef, inView: isHowVisible } = useInView(animationOptions);

              return (
          <section ref={howRef} className="py-12 sm:py-16 bg-gray-50">
            <div className="container mx-auto px-3 sm:px-4">
              <div className="max-w-5xl mx-auto">
                <h2 className={`text-4xl font-bold text-gray-900 mb-4 sm:mb-6 text-center ${isHowVisible ? 'animate-slide-up visible' : 'animate-slide-up'}`}>
                  How nestwise Works
                </h2>
                <p className={`text-sm sm:text-base md:text-lg text-gray-600 mb-8 sm:mb-12 text-center max-w-3xl mx-auto ${isHowVisible ? 'animate-slide-up visible' : 'animate-slide-up'}`} style={{ animationDelay: '100ms' }}>
                  Follow these steps to create a financial future that honors your parents' needs while building your own wealth.
                </p>

                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 lg:gap-8">
                  {[
                    {
                      number: "1",
                      title: "Complete Our Assessment",
                      description: "Answer questions about your financial situation and your parents' retirement readiness.",
                      delay: "0ms"
                    },
                    {
                      number: "2",
                      title: "Get Your Results",
                      description: "Receive a personalized analysis of both retirement journeys and potential gaps.",
                      delay: "100ms"
                    },
                    {
                      number: "3",
                      title: "Build Your Plan",
                      description: "Create actionable strategies to meet both your retirement goals and support your parents.",
                      delay: "200ms"
                    },
                    {
                      number: "4",
                      title: "Track & Adjust",
                      description: "Monitor progress and make adjustments as your financial situation evolves.",
                      delay: "300ms"
                    }
                  ].map((step, index) => (
                    <div
                      key={index}
                      className={`bg-white p-4 sm:p-6 rounded-lg border border-gray-100 shadow-sm hover:shadow-md hover:border-emerald-200 transition-all duration-300 ${isHowVisible ? 'animate-slide-up visible' : 'animate-slide-up'}`}
                      style={{ animationDelay: step.delay }}
                    >
                      <div className="w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-emerald-100 flex items-center justify-center mb-4 text-emerald-700 font-bold text-lg sm:text-xl group-hover:bg-emerald-200 transition-colors duration-300">
                        {step.number}
                      </div>
                      <h3 className="text-lg sm:text-xl font-semibold mb-2 sm:mb-3">{step.title}</h3>
                      <p className="text-sm sm:text-base text-gray-600">{step.description}</p>
                    </div>
                  ))}
                </div>
                  </div>
            </div>
          </section>
        );
      })()}

      {/* Waitlist CTA below How nestwise Works */}
      <section className="py-6 bg-white">
        <div className="container mx-auto px-4">
          <div className="flex justify-center">
            <Link
              href="/signup"
              className="rounded-lg bg-emerald-600 px-6 py-3 text-base font-medium text-white shadow-md transition-all duration-300 hover:bg-emerald-700 hover:shadow-lg active:scale-95"
            >
              Join the Waitlist
            </Link>
          </div>
        </div>
      </section>

      {/* Dashboard Preview Section */}
      {(() => {
        const { ref: dashboardRef, inView: isDashboardVisible } = useInView({
          threshold: 0.1,
          triggerOnce: true,
          rootMargin: "0px 0px -50px 0px"
        });

        return (
          <section
            ref={dashboardRef}
            className={`dashboard-section bg-white py-16 ${
              isDashboardVisible ? 'visible' : ''
            }`}
          >
            <div className="container mx-auto px-4">
              <h2 className="mb-12 text-center text-4xl font-bold text-gray-900">
                Your Financial Command Center
              </h2>
              <EnhancedDashboard />
            </div>
          </section>
        );
      })()}

      {/* Family Goals Dashboard - Merged Section */}
      {(() => {
        const { ref: goalsRef, inView: isGoalsVisible } = useInView(animationOptions);
        const [selectedGoal, setSelectedGoal] = useState<"home-down-payment" | "mom-kitchen" | "dad-medical" | "anniversary-trip">("dad-medical");
        const goalDetailsRef = useRef<HTMLDivElement>(null);

        // Function to handle goal selection and scrolling
        const handleGoalSelect = (goal: "home-down-payment" | "mom-kitchen" | "dad-medical" | "anniversary-trip") => {
          setSelectedGoal(goal);

          // Only scroll on mobile devices
          if (window.innerWidth < 1024 && goalDetailsRef.current) {
            // Add a small delay to ensure state updates before scrolling
            setTimeout(() => {
              goalDetailsRef.current?.scrollIntoView({
                behavior: 'smooth',
                block: 'nearest'
              });
            }, 100);
          }
        };

        // Goal details data
        type GoalDetail = {
          title: string;
          progress: number;
          contribution: number;
          contributionPercentage: number;
          targetDate: string;
          targetStatus: string;
          purpose: string;
          purposeDesc: string;
          impact: string;
          impactDesc: string;
        };

        type GoalDetailsMap = {
          "home-down-payment": GoalDetail;
          "mom-kitchen": GoalDetail;
          "dad-medical": GoalDetail;
          "anniversary-trip": GoalDetail;
        };

        const goalDetails: GoalDetailsMap = {
          "home-down-payment": {
            title: "Your First Home Down Payment",
            progress: 75,
            contribution: 1200,
            contributionPercentage: 80,
            targetDate: "December 2025",
            targetStatus: "On track with current savings rate",
            purpose: "Home Ownership",
            purposeDesc: "Secure your family's future with a place to call your own",
            impact: "Financial Independence",
            impactDesc: "Build equity and reduce long-term housing costs"
          },
          "mom-kitchen": {
            title: "Mom's Kitchen Renovation",
            progress: 30,
            contribution: 650,
            contributionPercentage: 75,
            targetDate: "August 2024",
            targetStatus: "Ahead of schedule by 2 months",
            purpose: "Quality of Life",
            purposeDesc: "Create a safer, more functional kitchen space for daily use",
            impact: "Home Value",
            impactDesc: "Increases property value while improving Mom's cooking experience"
          },
          "dad-medical": {
            title: "Dad's Medical Fund",
            progress: 60,
            contribution: 850,
            contributionPercentage: 85,
            targetDate: "June 2025",
            targetStatus: "On track with current savings rate",
            purpose: "Healthcare Security",
            purposeDesc: "Covers potential medical expenses and insurance gaps",
            impact: "Peace of Mind",
            impactDesc: "Dad can focus on enjoying retirement without health cost worries"
          },
          "anniversary-trip": {
            title: "Parents' 40th Anniversary Trip",
            progress: 90,
            contribution: 500,
            contributionPercentage: 90,
            targetDate: "March 2025",
            targetStatus: "Looking to complete early as a surprise",
            purpose: "Celebration",
            purposeDesc: "Honor their lifelong commitment with a memorable experience",
            impact: "Lasting Memories",
            impactDesc: "Create cherished family moments to treasure for years"
          }
        };

        const currentGoal = goalDetails[selectedGoal];

        return (
          <section
            ref={goalsRef}
            className={`py-12 sm:py-16 bg-gray-50`}
          >
            <div className="container mx-auto px-4">
              <div className="text-center mb-8 sm:mb-12">
                <h2 className={`text-4xl font-bold text-gray-900 mb-3 sm:mb-4 ${isGoalsVisible ? 'animate-slide-up visible' : 'animate-slide-up'}`}>
                  Create Personal Goals That Matter
                </h2>
                <p className={`text-sm sm:text-base md:text-lg text-gray-600 max-w-3xl mx-auto ${isGoalsVisible ? 'animate-slide-up visible' : 'animate-slide-up'}`} style={{ animationDelay: '100ms' }}>
                  Track your progress toward the financial milestones that matter most to you and your family.
                </p>
              </div>

              {/* Modified layout structure - flex column on mobile, grid on desktop */}
              <div className="mx-auto max-w-6xl flex flex-col lg:grid lg:grid-cols-2 gap-6 sm:gap-8">
                {/* Left Side - Goals List */}
                <div className={`${isGoalsVisible ? 'animate-slide-right visible' : 'animate-slide-right'} order-1`}>
                  <div className="bg-white p-4 sm:p-6 rounded-lg shadow-sm border border-gray-100 hover:shadow-md transition-all duration-300">
                    <h3 className="text-lg sm:text-xl font-semibold mb-4 text-gray-800">Your Family's Financial Goals</h3>
                    <div className="space-y-3 sm:space-y-4">
                      <div
                        className={`rounded-md ${selectedGoal === "home-down-payment" ? 'bg-emerald-50 shadow-sm scale-[1.02]' : 'bg-gray-50'} p-3 transform transition-all duration-300 hover:bg-emerald-50 hover:shadow-sm hover:scale-[1.02] cursor-pointer`}
                        onMouseEnter={() => setSelectedGoal("home-down-payment")}
                        onClick={() => handleGoalSelect("home-down-payment")}
                      >
                        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-2">
                          <h4 className="text-sm sm:text-base font-medium mb-1 sm:mb-0">Your First Home Down Payment</h4>
                          <span className="text-xs sm:text-sm font-semibold text-emerald-600">$90,000 / $120,000</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div className="bg-emerald-600 h-2 rounded-full transition-all duration-1000" style={{ width: isGoalsVisible ? '75%' : '0%' }}></div>
                        </div>
                      </div>

                      <div
                        className={`rounded-md ${selectedGoal === "mom-kitchen" ? 'bg-emerald-50 shadow-sm scale-[1.02]' : 'bg-gray-50'} p-3 transform transition-all duration-300 hover:bg-emerald-50 hover:shadow-sm hover:scale-[1.02] cursor-pointer`}
                        onMouseEnter={() => setSelectedGoal("mom-kitchen")}
                        onClick={() => handleGoalSelect("mom-kitchen")}
                      >
                        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-2">
                          <h4 className="text-sm sm:text-base font-medium mb-1 sm:mb-0">Mom's Kitchen Renovation</h4>
                          <span className="text-xs sm:text-sm font-semibold text-emerald-600">$10,500 / $35,000</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div className="bg-emerald-600 h-2 rounded-full transition-all duration-1000" style={{ width: isGoalsVisible ? '30%' : '0%' }}></div>
                        </div>
                      </div>

                      <div
                        className={`rounded-md ${selectedGoal === "dad-medical" ? 'bg-emerald-50 shadow-sm scale-[1.02]' : 'bg-gray-50'} p-3 transform transition-all duration-300 hover:bg-emerald-50 hover:shadow-sm hover:scale-[1.02] cursor-pointer`}
                        onMouseEnter={() => setSelectedGoal("dad-medical")}
                        onClick={() => handleGoalSelect("dad-medical")}
                      >
                        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-2">
                          <h4 className="text-sm sm:text-base font-medium mb-1 sm:mb-0">Dad's Medical Fund</h4>
                          <span className="text-xs sm:text-sm font-semibold text-emerald-600">$45,000 / $75,000</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div className="bg-emerald-600 h-2 rounded-full transition-all duration-1000" style={{ width: isGoalsVisible ? '60%' : '0%' }}></div>
                        </div>
                      </div>

                      <div
                        className={`rounded-md ${selectedGoal === "anniversary-trip" ? 'bg-emerald-50 shadow-sm scale-[1.02]' : 'bg-gray-50'} p-3 transform transition-all duration-300 hover:bg-emerald-50 hover:shadow-sm hover:scale-[1.02] cursor-pointer`}
                        onMouseEnter={() => setSelectedGoal("anniversary-trip")}
                        onClick={() => handleGoalSelect("anniversary-trip")}
                      >
                        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-2">
                          <h4 className="text-sm sm:text-base font-medium mb-1 sm:mb-0">Parents' 40th Anniversary Trip</h4>
                          <span className="text-xs sm:text-sm font-semibold text-emerald-600">$13,500 / $15,000</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div className="bg-emerald-600 h-2 rounded-full transition-all duration-1000" style={{ width: isGoalsVisible ? '90%' : '0%' }}></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Right Side - Goal Details - Now positioned below on mobile and with improved visibility */}
                <div
                  ref={goalDetailsRef}
                  className={`${isGoalsVisible ? 'animate-slide-left visible' : 'animate-slide-left'} order-2 mt-6 lg:mt-0`}
                >
                  <div className="relative h-[320px] sm:h-[360px] w-full max-w-md mx-auto">
                    <div className="absolute right-0 top-0 h-full w-full sm:w-4/5 rounded-lg bg-emerald-100 transform transition-transform duration-700 hover:scale-[1.03]">
                      <div className="absolute left-0 sm:left-4 top-0 sm:top-4 h-full w-full rounded-lg bg-white p-3 sm:p-4 shadow-lg transition-all duration-300 hover:shadow-xl">
                        <h4 className="mb-2 text-sm sm:text-base font-medium">Goal Details: {currentGoal.title}</h4>
                        <div className="mb-2 space-y-2">
                          <div>
                            <div className="mb-1 flex items-center justify-between">
                              <span className="text-xs sm:text-sm">Current Progress</span>
                              <span className="text-xs sm:text-sm font-medium">{currentGoal.progress}%</span>
                            </div>
                            <div className="h-2 w-full rounded-full bg-gray-100">
                              <div className="h-2 rounded-full bg-emerald-500 transition-all duration-1000" style={{ width: isGoalsVisible ? `${currentGoal.progress}%` : '0%' }}></div>
                            </div>
                          </div>
                          <div>
                            <div className="mb-1 flex items-center justify-between">
                              <span className="text-xs sm:text-sm">Monthly Contribution</span>
                              <span className="text-xs sm:text-sm font-medium text-emerald-700">${currentGoal.contribution}</span>
                            </div>
                          </div>
                        </div>
                        <div className="space-y-1.5">
                          <div className="rounded border border-gray-100 p-1.5 transition-all duration-300 hover:border-emerald-200 hover:bg-emerald-50 hover:shadow-sm">
                            <h5 className="text-xs sm:text-sm font-medium">Target Date: {currentGoal.targetDate}</h5>
                            <p className="text-xs text-gray-500">{currentGoal.targetStatus}</p>
                          </div>
                          <div className="rounded border border-gray-100 p-1.5 transition-all duration-300 hover:border-emerald-200 hover:bg-emerald-50 hover:shadow-sm">
                            <h5 className="text-xs sm:text-sm font-medium">Purpose: {currentGoal.purpose}</h5>
                            <p className="text-xs text-gray-500">{currentGoal.purposeDesc}</p>
                          </div>
                          <div className="rounded border border-gray-100 p-1.5 transition-all duration-300 hover:border-emerald-200 hover:bg-emerald-50 hover:shadow-sm">
                            <h5 className="text-xs sm:text-sm font-medium">Impact: {currentGoal.impact}</h5>
                            <p className="text-xs text-gray-500">{currentGoal.impactDesc}</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>
        );
      })()}

      {/* AI Conversation Practice Section */}
      {(() => {
        const { ref: aiRef, inView: isAiVisible } = useInView(animationOptions);

        return (
          <section ref={aiRef} className="py-12 sm:py-16 bg-white">
            <div className="container mx-auto px-4">
              <div className="text-center mb-8 sm:mb-12">
                <h2 className={`text-4xl font-bold text-gray-900 mb-3 sm:mb-4 ${isAiVisible ? 'animate-slide-up visible' : 'animate-slide-up'}`}>
                  Practice Financial Conversations
                </h2>
                <p className={`text-sm sm:text-base md:text-lg text-gray-600 max-w-3xl mx-auto ${isAiVisible ? 'animate-slide-up visible' : 'animate-slide-up'}`} style={{ animationDelay: '100ms' }}>
                  Prepare for important money talks with your parents using our AI conversation simulator.
                </p>
              </div>

              <div className={`mx-auto max-w-4xl rounded-xl bg-white p-4 sm:p-6 shadow-lg ${isAiVisible ? 'animate-scale visible' : 'animate-scale'} hover:shadow-xl transition-shadow duration-300`}>
                <div className="mb-4 border-b border-gray-100 pb-3">
                  <h3 className="text-base sm:text-lg font-semibold text-gray-800">Conversation Practice</h3>
                </div>
                <div className="space-y-3 sm:space-y-4 stagger-children">
                  <div className="flex items-start group">
                    <div className="mr-3 h-8 w-8 flex-shrink-0 rounded-full bg-emerald-100 flex items-center justify-center group-hover:bg-emerald-200 transition-colors duration-300">
                      <MessageSquare className="h-4 w-4 text-emerald-600" />
                    </div>
                    <div className="rounded-lg bg-gray-100 px-3 sm:px-4 py-2 text-xs sm:text-sm hover:bg-gray-200 transition-colors duration-300 max-w-[85%] sm:max-w-[75%]">
                      <p>How do I start a conversation about my parents&apos; retirement savings?</p>
                    </div>
                  </div>
                  <div className="flex items-start justify-end group">
                    <div className="rounded-lg bg-emerald-100 px-3 sm:px-4 py-2 text-xs sm:text-sm hover:bg-emerald-200 transition-colors duration-300 max-w-[85%] sm:max-w-[75%]">
                      <p>Try opening with a statement about your own retirement planning journey. For example:</p>
                      <p className="mt-2 italic text-emerald-700">"Mom, Dad, I've been learning about retirement planning for myself, and it made me wonder what your plans look like. Would you be comfortable talking about that?"</p>
                    </div>
                    <div className="ml-3 h-8 w-8 flex-shrink-0 rounded-full bg-emerald-100 flex items-center justify-center group-hover:bg-emerald-200 transition-colors duration-300">
                      <BookOpen className="h-4 w-4 text-emerald-600" />
                    </div>
                  </div>
                </div>
                <div className="mt-4 flex">
                  <input
                    type="text"
                    placeholder="Type your practice question..."
                    className="flex-1 rounded-l-lg border border-gray-200 px-3 sm:px-4 py-2 text-xs sm:text-sm focus:border-emerald-500 focus:outline-none transition-all duration-300 focus:ring-2 focus:ring-emerald-200"
                  />
                  <button className="rounded-r-lg bg-emerald-600 px-4 py-2 text-xs sm:text-sm font-medium text-white hover:bg-emerald-700 transition-colors duration-300 active:scale-95 transform">
                    Send
                  </button>
                </div>
              </div>
            </div>
          </section>
        );
      })()}

      {/* Final CTA Section */}
      <section className="py-12 sm:py-16 bg-emerald-50">
        <div className="container mx-auto">
          <div className="bg-emerald-600 rounded-lg shadow-xl p-6 sm:p-10 mx-4 sm:mx-8 text-white text-center transform transition-all duration-500 hover:shadow-2xl hover:scale-[1.01]">
            <div className="container mx-auto px-3 text-center sm:px-4">
              <h2 className="mb-4 sm:mb-6 text-xl sm:text-2xl md:text-3xl font-bold">
                Retirement Planning for Two Generations Starts Here
              </h2>
              <div className="flex justify-center px-2 sm:px-4">
                <Link
                  href="/signup"
                  className="w-full sm:w-auto transform rounded-lg bg-white px-6 py-3 sm:px-8 sm:py-3 text-base sm:text-lg font-medium text-emerald-700 shadow-md transition-all duration-300 hover:-translate-y-1 hover:bg-emerald-50 hover:shadow-xl active:translate-y-0 active:scale-95"
                >
                  Join the Waitlist
                </Link>
              </div>
            </div>
              </div>
            </div>
          </section>

      {/* Footer */}
      <footer className="bg-gray-800 text-white py-8 sm:py-10">
        <div className="container mx-auto px-4 sm:px-6">
          <div className="flex flex-col sm:flex-row justify-between items-center mb-4 sm:mb-6">
            <Link href="/" className="mb-4 sm:mb-0">
            <Image
              src="/nestwise-w-text.png"
                alt="nestwise Logo"
              width={120}
              height={40}
                className="w-28 sm:w-32 brightness-0 invert"
              />
            </Link>
            <div className="flex space-x-4 sm:space-x-6">
              <Link href="#" className="text-sm text-gray-300 hover:text-white transition-colors duration-200">About</Link>
              <Link href="#" className="text-sm text-gray-300 hover:text-white transition-colors duration-200">Privacy</Link>
              <Link href="#" className="text-sm text-gray-300 hover:text-white transition-colors duration-200">Terms</Link>
              <Link href="#" className="text-sm text-gray-300 hover:text-white transition-colors duration-200">Contact</Link>
            </div>
          </div>
          <div className="border-t border-gray-700 pt-4 flex flex-col sm:flex-row justify-between items-center">
            <div className="text-xs sm:text-sm text-gray-400 mb-2 sm:mb-0">
              © {new Date().getFullYear()} nestwise. All rights reserved.
            </div>
            <div className="flex space-x-4">
              <Link href="#" aria-label="Twitter" className="text-gray-400 hover:text-emerald-300 transition-colors duration-200">
                <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path></svg>
              </Link>
              <Link href="#" aria-label="LinkedIn" className="text-gray-400 hover:text-emerald-300 transition-colors duration-200">
                <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24"><path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg>
              </Link>
              <Link href="https://www.instagram.com/trynestwise" aria-label="Instagram" className="text-gray-400 hover:text-emerald-300 transition-colors duration-200">
                <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24"><path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"></path></svg>
              </Link>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Home;

================
File: src/components/DashboardMockup.tsx
================
"use client";

/**
 * @deprecated This component has been replaced by EnhancedDashboard.
 * Please use EnhancedDashboard instead.
 */

import { BarChart2 } from "lucide-react";

export const DashboardMockup: React.FC = () => (
  <div className="mx-auto max-w-4xl rounded-2xl bg-white p-6 shadow-lg">
    <div className="mb-6 flex items-center justify-between">
      <h3 className="text-lg font-semibold text-gray-800">Financial Dashboard</h3>
      <div className="flex gap-2">
        <span className="inline-flex items-center rounded-full bg-emerald-100 px-3 py-1 text-sm font-medium text-emerald-800">
          Your Retirement
        </span>
        <span className="inline-flex items-center rounded-full bg-emerald-50 px-3 py-1 text-sm font-medium text-emerald-700">
          Parents&apos; Retirement
        </span>
      </div>
    </div>
    <div className="mb-6 grid grid-cols-1 gap-6 md:grid-cols-2">
      <div className="rounded-xl bg-emerald-50 p-4">
        <div className="mb-2 text-sm text-gray-600">Your Retirement Progress</div>
        <div className="text-2xl font-bold text-emerald-700">68%</div>
        <div className="mt-2 h-2.5 w-full rounded-full bg-gray-200">
          <div className="h-2.5 w-[68%] rounded-full bg-emerald-600 transition-all duration-500"></div>
        </div>
      </div>
      <div className="rounded-xl bg-emerald-50 p-4">
        <div className="mb-2 text-sm text-gray-600">Parents&apos; Retirement Progress</div>
        <div className="text-2xl font-bold text-emerald-700">45%</div>
        <div className="mt-2 h-2.5 w-full rounded-full bg-gray-200">
          <div className="h-2.5 w-[45%] rounded-full bg-emerald-600 transition-all duration-500"></div>
        </div>
      </div>
    </div>
    <div className="mb-6 flex h-48 items-center justify-center rounded-xl bg-gray-50">
      <BarChart2 className="h-32 w-32 text-emerald-200" />
    </div>
    <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
      <div className="rounded-xl bg-emerald-50 p-3 text-center">
        <div className="text-sm text-gray-600">Monthly Savings</div>
        <div className="text-lg font-semibold text-emerald-700">$2,450</div>
      </div>
      <div className="rounded-xl bg-emerald-50 p-3 text-center">
        <div className="text-sm text-gray-600">Total Assets</div>
        <div className="text-lg font-semibold text-emerald-700">$425,800</div>
      </div>
      <div className="rounded-xl bg-emerald-50 p-3 text-center">
        <div className="text-sm text-gray-600">Projected Goal</div>
        <div className="text-lg font-semibold text-emerald-700">$1.2M</div>
      </div>
    </div>
  </div>
);

================
File: src/components/EnhancedDashboard.tsx
================
"use client";

import React, { useState } from 'react';
import { LineChart, PieChart } from 'lucide-react';

interface InvestmentAllocation {
  stocks: number;
  bonds: number;
  realEstate: number;
  cash: number;
  other: number;
}

interface DashboardData {
  progress: number;
  monthlySavings: number;
  totalAssets: number;
  projectedGoal: string;
  annualGoalProgress: number;
  investmentAllocations: InvestmentAllocation;
}

interface DashboardDataMap {
  personal: DashboardData;
  parents: DashboardData;
}

const EnhancedDashboard: React.FC = () => {
  const [activeView, setActiveView] = useState<'personal' | 'parents'>('personal');

  const dashboardData: DashboardDataMap = {
    personal: {
      progress: 64,
      monthlySavings: 2450,
      totalAssets: 425800,
      projectedGoal: '1.2M',
      annualGoalProgress: 75,
      investmentAllocations: {
        stocks: 50,
        bonds: 10,
        realEstate: 20,
        cash: 15,
        other: 5
      }
    },
    parents: {
      progress: 45,
      monthlySavings: 1850,
      totalAssets: 385000,
      projectedGoal: '950K',
      annualGoalProgress: 83,
      investmentAllocations: {
        stocks: 5,
        bonds: 20,
        realEstate: 50,
        cash: 20,
        other: 5
      }
    }
  };

  const activeData = dashboardData[activeView];

  return (
    <div className="mx-auto max-w-4xl rounded-2xl bg-white p-3 shadow-lg sm:p-6">
      <div className="mb-4 flex flex-col gap-3 sm:mb-6 sm:flex-row sm:items-center sm:justify-between">
        <h3 className="text-base font-semibold text-gray-800 sm:text-lg">Financial Dashboard</h3>
        <div className="flex gap-2">
          <button
            onClick={() => setActiveView('personal')}
            className={`inline-flex min-h-[44px] flex-1 items-center justify-center rounded-full px-3 py-2 text-sm font-medium transition-colors sm:min-h-[36px] sm:flex-initial sm:py-1 ${
              activeView === 'personal'
                ? 'bg-emerald-100 text-emerald-800'
                : 'bg-gray-100 text-gray-600 active:bg-emerald-50 sm:hover:bg-emerald-50'
            }`}
          >
            Your Retirement
          </button>
          <button
            onClick={() => setActiveView('parents')}
            className={`inline-flex min-h-[44px] flex-1 items-center justify-center rounded-full px-3 py-2 text-sm font-medium transition-colors sm:min-h-[36px] sm:flex-initial sm:py-1 ${
              activeView === 'parents'
                ? 'bg-emerald-100 text-emerald-800'
                : 'bg-gray-100 text-gray-600 active:bg-emerald-50 sm:hover:bg-emerald-50'
            }`}
          >
            Parents&apos; Retirement
          </button>
        </div>
      </div>

      <div className="mb-4 grid grid-cols-1 gap-3 sm:mb-6 sm:gap-6 md:grid-cols-2">
        <div className="rounded-xl bg-emerald-50 p-3 sm:p-4">
          <div className="text-sm text-gray-600 mb-2">
            {activeView === 'personal' ? 'Your' : "Parents'"} Retirement Progress
          </div>
          <div className="text-2xl font-bold text-emerald-700">{activeData.progress}%</div>
          <div className="w-full bg-gray-200 rounded-full h-2.5 mt-2">
            <div
              className="bg-emerald-600 h-2.5 rounded-full transition-all duration-500"
              style={{ width: `${activeData.progress}%` }}
            ></div>
          </div>
        </div>

        <div className="rounded-xl bg-emerald-50 p-3 sm:p-4">
          <div className="mb-2 text-sm text-gray-600">Annual Goal Progress</div>
          <div className="text-2xl font-bold text-emerald-700">{activeData.annualGoalProgress}%</div>
          <div className="w-full bg-gray-200 rounded-full h-2.5 mt-2">
            <div
              className="bg-emerald-600 h-2.5 rounded-full transition-all duration-500"
              style={{ width: `${activeData.annualGoalProgress}%` }}
            ></div>
          </div>
        </div>
      </div>

      <div className="mb-4 rounded-xl bg-gray-50 sm:mb-6">
        <div className="p-3 sm:p-4">
          <div className="flex items-center justify-between mb-3">
            <h4 className="font-semibold text-gray-700">Investment Allocation</h4>
            <div className="flex gap-2">
              <button className="min-h-[44px] min-w-[44px] rounded-lg p-2 active:bg-gray-100 sm:min-h-[36px] sm:min-w-[36px] sm:hover:bg-gray-100">
                <LineChart className="h-5 w-5 text-gray-600" />
              </button>
              <button className="min-h-[44px] min-w-[44px] rounded-lg p-2 active:bg-gray-100 sm:min-h-[36px] sm:min-w-[36px] sm:hover:bg-gray-100">
                <PieChart className="h-5 w-5 text-gray-600" />
              </button>
            </div>
          </div>
          <div className="flex flex-col space-y-3">
            {Object.entries(activeData.investmentAllocations).map(([key, value]) => (
              <div key={key} className="flex flex-col">
                <div className="flex items-center justify-between mb-1">
                  <span className="text-sm text-gray-600">{key.charAt(0).toUpperCase() + key.slice(1)}</span>
                  <span className="text-xs font-medium text-gray-700">{value}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-emerald-600 h-2 rounded-full transition-all duration-500"
                    style={{ width: `${value}%` }}
                  ></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 gap-3 sm:grid-cols-3 sm:gap-4">
        <div className="rounded-xl bg-emerald-50 p-3 text-center">
          <div className="text-sm text-gray-600">Monthly Savings</div>
          <div className="text-lg font-semibold text-emerald-700">
            ${activeData.monthlySavings.toLocaleString()}
          </div>
        </div>
        <div className="p-3 bg-emerald-50 rounded-xl text-center">
          <div className="text-sm text-gray-600">Total Assets</div>
          <div className="text-lg font-semibold text-emerald-700">
            ${activeData.totalAssets.toLocaleString()}
          </div>
        </div>
        <div className="p-3 bg-emerald-50 rounded-xl text-center">
          <div className="text-sm text-gray-600">Projected Goal</div>
          <div className="text-lg font-semibold text-emerald-700">
            ${activeData.projectedGoal}
          </div>
        </div>
      </div>
    </div>
  );
};

export default EnhancedDashboard;

================
File: src/components/PricingCTA.tsx
================
"use client";

import React from 'react';
import { Check, Shield, Users } from 'lucide-react';

const plans = [
  {
    name: "Basic",
    price: "$10",
    period: "monthly",
    description: "Essential tools for personal retirement planning",
    features: [
      "Personal retirement dashboard",
      "Basic retirement calculator",
      "Educational resources",
      "Mobile app access"
    ],
    highlighted: false,
    buttonText: "Get Started"
  },
  {
    name: "Family Plus",
    price: "$15",
    period: "monthly",
    description: "Perfect for managing your family's retirement journey",
    features: [
      "Everything in Basic",
      "Family dashboard with parent accounts",
      "Advanced planning tools",
      "Automated monthly reports",
      "Priority customer support"
    ],
    highlighted: true,
    buttonText: "Start Free Trial",
    badge: "Most Popular"
  },
  {
    name: "Family Pro",
    price: "$20",
    period: "monthly",
    description: "Complete solution for comprehensive family planning",
    features: [
      "Everything in Family Plus",
      "Multiple customized account views",
      "Support for parents and dependents",
      "Estate planning tools",
      "Dedicated family advisor"
    ],
    highlighted: false,
    buttonText: "Contact Sales"
  }
];

const PricingCTA: React.FC = () => {
  return (
    <section className="bg-gradient-to-b from-white to-emerald-50 py-20">
      <div className="container mx-auto px-4">
        {/* Pricing Grid - Now Horizontal */}
        <div className="mb-16 flex max-w-7xl flex-col gap-8 px-4 md:flex-row">
          {plans.map((plan) => (
            <div
              key={plan.name}
              className={`relative flex flex-1 flex-col rounded-2xl p-8 transition-all duration-300 ${
                plan.highlighted
                  ? 'border-2 border-emerald-500 bg-emerald-50 transform hover:-translate-y-1 hover:shadow-[0_0_30px_rgba(16,185,129,0.2)]'
                  : 'border border-gray-200 bg-white hover:shadow-lg'
              }`}
            >
              {plan.badge && (
                <div className="absolute -top-4 left-1/2 -translate-x-1/2">
                  <span className="rounded-full bg-emerald-600 px-3 py-1 text-sm text-white">
                    {plan.badge}
                  </span>
                </div>
              )}

              <div className="text-center">
                <h3 className="mb-2 text-xl font-bold text-gray-900">{plan.name}</h3>
                <div className="mb-4">
                  <span className="text-4xl font-bold text-gray-900">{plan.price}</span>
                  <span className="text-gray-600">{plan.period && `/${plan.period}`}</span>
                </div>
                <p className="mb-6 text-gray-600">{plan.description}</p>
              </div>

              <ul className="mb-8 flex-grow space-y-4">
                {plan.features.map((feature, idx) => (
                  <li key={idx} className="flex items-start gap-2">
                    <Check className="mt-0.5 h-5 w-5 flex-shrink-0 text-emerald-600" />
                    <span className="text-gray-600">{feature}</span>
                  </li>
                ))}
              </ul>

              <button
                className={`w-full rounded-lg px-6 py-3 transition-all duration-300 ${
                  plan.highlighted
                    ? 'bg-emerald-600 text-white transform hover:scale-105 hover:bg-emerald-700'
                    : 'bg-gray-900 text-white hover:bg-gray-800'
                }`}
              >
                {plan.buttonText}
              </button>
            </div>
          ))}
        </div>

        {/* Additional CTAs */}
        <div className="mx-auto flex max-w-4xl flex-col gap-8 md:flex-row">
          <div className="flex-1 rounded-xl bg-white p-6 text-center transition-shadow hover:shadow-lg">
            <div className="mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-emerald-100">
              <Users className="h-6 w-6 text-emerald-600" />
            </div>
            <h3 className="mb-2 text-lg font-semibold">Schedule a Family Demo</h3>
            <p className="mb-4 text-gray-600">See how nestwise can help your entire family plan for the future.</p>
            <button className="font-semibold text-emerald-600 hover:text-emerald-700">
              Book a Demo →
            </button>
          </div>

          <div className="flex-1 rounded-xl bg-white p-6 text-center transition-shadow hover:shadow-lg">
            <div className="mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-emerald-100">
              <Shield className="h-6 w-6 text-emerald-600" />
            </div>
            <h3 className="mb-2 text-lg font-semibold">Free Resource Center</h3>
            <p className="mb-4 text-gray-600">Access our library of retirement planning guides and tools.</p>
            <button className="font-semibold text-emerald-600 hover:text-emerald-700">
              View Resources →
            </button>
          </div>
        </div>
      </div>
    </section>
  );
};

export default PricingCTA;

================
File: src/components/TestimonialCarousel.tsx
================
"use client";

import { ChevronLeft, ChevronRight } from "lucide-react";
import { useState, useEffect } from "react";

interface Testimonial {
  text: string;
  author: string;
  role: string;
}

const testimonials: Testimonial[] = [
  {
    text: "nestwise helped me understand exactly how much support my parents might need. Now I can plan for both our futures with confidence.",
    author: "Sarah M.",
    role: "Software Engineer"
  },
  {
    text: "The dashboard makes it so easy to track both my retirement goals and my parents'. It's like having a financial advisor in my pocket.",
    author: "Michael L.",
    role: "Marketing Director"
  },
  {
    text: "Setting up retirement accounts for my parents was seamless. nestwise guided me through every step of the process.",
    author: "David K.",
    role: "Healthcare Professional"
  },
  {
    text: "Finally found a platform that understands the unique challenges of managing both my retirement and my parents'. The insights are invaluable.",
    author: "Jennifer R.",
    role: "Project Manager"
  },
  {
    text: "The ability to see both retirement plans side by side has made family financial discussions so much easier and more productive.",
    author: "Robert T.",
    role: "Small Business Owner"
  },
  {
    text: "The educational resources helped me make informed decisions about long-term care planning for my parents while balancing my own goals.",
    author: "Lisa M.",
    role: "Education Consultant"
  },
  {
    text: "nestwise's retirement calculator gave us a clear picture of where we stand and what steps we need to take next.",
    author: "James W.",
    role: "Sales Director"
  },
  {
    text: "As someone supporting both children and parents, nestwise has been crucial in helping me balance multiple financial responsibilities.",
    author: "Patricia H.",
    role: "HR Manager"
  },
  {
    text: "The platform's family sharing features make it easy to collaborate with my siblings on our parents' retirement planning.",
    author: "Thomas N.",
    role: "Financial Analyst"
  },
  {
    text: "Being able to model different scenarios has helped us prepare for various retirement possibilities. Extremely useful tool!",
    author: "Michelle K.",
    role: "Operations Manager"
  },
  {
    text: "The mobile app keeps me connected to our family's retirement progress wherever I am. Love the instant notifications!",
    author: "Daniel P.",
    role: "Technology Consultant"
  },
  {
    text: "nestwise made it simple to consolidate and track multiple retirement accounts. The peace of mind is priceless.",
    author: "Rachel S.",
    role: "Healthcare Administrator"
  },
  {
    text: "The platform's recommendations have helped us optimize our retirement strategies and reduce unnecessary fees.",
    author: "Kevin L.",
    role: "Research Scientist"
  }
];

export const TestimonialCarousel: React.FC = () => {
  const [current, setCurrent] = useState(0);

  const next = () => setCurrent(prev => (prev + 1) % testimonials.length);
  const prev = () => setCurrent(prev => (prev - 1 + testimonials.length) % testimonials.length);

  useEffect(() => {
    const timer = setInterval(next, 5000);
    return () => clearInterval(timer);
  }, []); // Remove current from dependencies to avoid unnecessary interval resets

  return (
    <div className="relative mx-auto w-full max-w-4xl px-4 py-12">
      <div className="rounded-2xl bg-white p-8 shadow-lg">
        <div className="relative h-48">
          {testimonials.map((testimonial, idx) => (
            <div
              key={`${testimonial.author}-${idx}`}
              className={`absolute w-full transition-all duration-500 ${
                idx === current ? "translate-x-0 opacity-100" : "translate-x-8 opacity-0"
              }`}
            >
              <p className="mb-4 text-lg italic text-gray-700">{testimonial.text}</p>
              <div className="font-semibold text-emerald-700">{testimonial.author}</div>
              <div className="text-sm text-gray-500">{testimonial.role}</div>
            </div>
          ))}
        </div>
        <div className="mt-6 flex justify-center gap-4">
          <button
            onClick={prev}
            className="rounded-full p-2 text-emerald-700 transition-colors hover:bg-emerald-50"
            aria-label="Previous testimonial"
          >
            <ChevronLeft className="h-6 w-6" />
          </button>
          <button
            onClick={next}
            className="rounded-full p-2 text-emerald-700 transition-colors hover:bg-emerald-50"
            aria-label="Next testimonial"
          >
            <ChevronRight className="h-6 w-6" />
          </button>
        </div>
      </div>
    </div>
  );
};

================
File: src/lib/validations/auth.ts
================
import { z } from "zod";

export const signupSchema = z.object({
  name: z.string().min(1, "Name is required"),
  email: z.string().min(1, "Email is required").email("Invalid email address"),
  phone: z
    .preprocess((val) => {
      // If the value is an empty string, return undefined
      if (val === "") return undefined;
      // Otherwise, return the value as is
      return val;
    }, z.string()
      .optional()
      .refine(
        val => val === undefined || /^(\+\d{1,2}\s?)?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$/.test(val),
        { message: "Invalid phone number format" }
      )
    ),
});

export type SignupInput = z.infer<typeof signupSchema>;

================
File: src/server/api/procedures/auth/signup.ts
================
import { TRPCError } from "@trpc/server";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import crypto from "crypto";

import { env } from "@/env";
import { db } from "@/server/db";
import { procedure } from "@/server/api/trpc";
import { signupSchema } from "@/lib/validations/auth";

export const signup = procedure
  .input(signupSchema)
  .mutation(async ({ input }) => {
    console.log("Processing signup request for email:", input.email);
    
    try {
      // Check if user already exists
      const existingUser = await db.user.findUnique({
        where: {
          email: input.email,
        },
      });

      if (existingUser) {
        console.log("User with email already exists:", input.email);
        throw new TRPCError({
          code: "CONFLICT",
          message: "A user with this email already exists",
        });
      }

      // Generate a secure random password since the database schema requires it
      // This is a placeholder as the user won't need to know this password
      const randomPassword = crypto.randomBytes(32).toString("hex");
      const hashedPassword = await bcrypt.hash(randomPassword, 10);
      console.log("Generated and hashed random password for passwordless signup");

      // Create new user
      const user = await db.user.create({
        data: {
          name: input.name,
          email: input.email,
          password: hashedPassword,
          phone: input.phone,
        },
      });
      console.log("User created successfully with ID:", user.id);

      // Generate JWT token
      const token = jwt.sign(
        { userId: user.id },
        env.JWT_SECRET,
        { expiresIn: "1y" }
      );
      console.log("JWT token generated successfully");

      return {
        success: true,
        token,
      };
    } catch (error) {
      console.error("Error in signup procedure:", error);
      if (error instanceof TRPCError) {
        throw error;
      }
      throw new TRPCError({
        code: "INTERNAL_SERVER_ERROR",
        message: "An error occurred while creating your account",
        cause: error,
      });
    }
  });

================
File: src/server/api/root.ts
================
import {
  createCallerFactory,
  createTRPCRouter,
  procedure,
} from "@/server/api/trpc";
import { signup } from "./procedures/auth/signup";

/**
 * This is the primary router for your server.
 *
 * Procedures from api/procedures should be added here.
 */
export const appRouter = createTRPCRouter({
  signup,
  placeholderProcedure: procedure.query(() => {
    return "placeholder";
  }),
});

// export type definition of API
export type AppRouter = typeof appRouter;

/**
 * Create a server-side caller for the tRPC API.
 * @example
 * const trpc = createCaller(createContext);
 * const res = await trpc.post.all();
 *       ^? Post[]
 */
export const createCaller = createCallerFactory(appRouter);

================
File: src/server/api/trpc.ts
================
/**
 * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:
 * 1. You want to modify request context (see Part 1).
 * 2. You want to create a new middleware or type of procedure (see Part 3).
 *
 * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will
 * need to use are documented accordingly near the end.
 */
import { initTRPC } from "@trpc/server";
import superjson from "superjson";
import { ZodError } from "zod";

/**
 * 1. CONTEXT
 *
 * This section defines the "contexts" that are available in the backend API.
 *
 * These allow you to access things when processing a request, like the database, the session, etc.
 *
 * This helper generates the "internals" for a tRPC context. The API handler and RSC clients each
 * wrap this and provides the required context.
 *
 * @see https://trpc.io/docs/server/context
 */
export const createTRPCContext = async (opts: { headers: Headers }) => {
  return {
    ...opts,
  };
};

/**
 * 2. INITIALIZATION
 *
 * This is where the tRPC API is initialized, connecting the context and transformer. We also parse
 * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation
 * errors on the backend.
 */
const t = initTRPC.context<typeof createTRPCContext>().create({
  transformer: superjson,
  errorFormatter({ shape, error }) {
    return {
      ...shape,
      data: {
        ...shape.data,
        zodError:
          error.cause instanceof ZodError ? error.cause.flatten() : null,
      },
    };
  },
});

/**
 * Create a server-side caller.
 *
 * @see https://trpc.io/docs/server/server-side-calls
 */
export const createCallerFactory = t.createCallerFactory;

/**
 * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)
 *
 * These are the pieces you use to build your tRPC API. You should import these a lot in the
 * "/src/server/api/routers" directory.
 */

/**
 * This is how you create new routers and sub-routers in your tRPC API.
 *
 * @see https://trpc.io/docs/router
 */
export const createTRPCRouter = t.router;

export const procedure = t.procedure;

================
File: src/server/db.ts
================
import { PrismaClient } from "@prisma/client";

import { env } from "@/env";

const createPrismaClient = () =>
  new PrismaClient({
    log:
      env.NODE_ENV === "development" ? ["query", "error", "warn"] : ["error"],
  });

const globalForPrisma = globalThis as unknown as {
  prisma: ReturnType<typeof createPrismaClient> | undefined;
};

export const db = globalForPrisma.prisma ?? createPrismaClient();

if (env.NODE_ENV !== "production") globalForPrisma.prisma = db;

================
File: src/styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Enable smooth scrolling */
html {
  scroll-behavior: smooth;
}

/* Disable smooth scrolling for users who prefer reduced motion */
@media (prefers-reduced-motion: reduce) {
  html {
    scroll-behavior: auto;
  }
}

/* Feature heading animation */
.feature-heading {
  opacity: 0;
  transform: translateY(15px);
  transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  will-change: transform, opacity;
  backface-visibility: hidden;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.feature-heading.visible {
  opacity: 1;
  transform: translateY(0);
}

/* Optimize animations for mobile */
@media (max-width: 640px) {
  .feature-heading {
    transform: translateY(10px);
    transition-duration: 0.4s;
  }
}

@media (prefers-reduced-motion: reduce) {
  .feature-heading {
    transform: none;
    transition: opacity 0.1s ease;
  }
}

/* Dashboard animation classes */
.dashboard-section {
  opacity: 0;
  transform: translateY(20px);
  transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  will-change: transform, opacity;
  backface-visibility: hidden;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@media (max-width: 640px) {
  .dashboard-section {
    transform: translateY(15px);
    transition-duration: 0.4s;
  }
}

.dashboard-section.visible {
  opacity: 1;
  transform: translateY(0);
}

.feature-card {
  opacity: 0;
  transform: translateY(20px) scale(0.98);
  transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  will-change: transform, opacity;
  backface-visibility: hidden;
  -webkit-tap-highlight-color: transparent;
}

.feature-card.visible {
  opacity: 1;
  transform: translateY(0) scale(1);
}

/* Optimize animations for mobile */
@media (max-width: 640px) {
  .feature-card {
    transform: translateY(15px) scale(0.98);
    transition-duration: 0.4s;
  }
}

/* Apply progressive delays based on card position */
.feature-card:nth-child(1).visible {
  transition-delay: 50ms;
}

.feature-card:nth-child(2).visible {
  transition-delay: 150ms;
}

.feature-card:nth-child(3).visible {
  transition-delay: 250ms;
}

/* Touch-friendly hover effects with performance optimizations */
@media (hover: hover) {
  .feature-card.visible:hover {
    transform: translateY(-3px);
    transition-duration: 0.3s;
    will-change: transform;
  }
}

@media (hover: none) {
  .feature-card:active {
    transform: scale(0.98);
    transition-duration: 0.1s;
    will-change: transform;
  }
}

/* Optimize paint performance for mobile devices */
@media (max-width: 640px) {
  .feature-card,
  .feature-heading,
  .dashboard-section {
    transform: translate3d(0, 0, 0);
    -webkit-transform: translate3d(0, 0, 0);
  }
}

/* Footer styling */
.footer-section {
  position: relative;
  width: 100%;
  background-color: white;
  transition: transform 0.3s ease;
  margin-top: auto;
  border-top: 1px solid #f3f4f6;
  z-index: 10;
}

/* Subtle hover effect */
@media (hover: hover) {
  .footer-section:hover {
    transform: translateY(-2px);
  }
}

/* Animation classes for slide transitions */
@keyframes slide-up {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slide-right {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slide-left {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.animate-slide-up {
  opacity: 0;
  transform: translateY(20px);
}

.animate-slide-up.visible {
  animation: slide-up 0.5s ease forwards;
}

.animate-slide-right {
  opacity: 0;
  transform: translateX(-20px);
}

.animate-slide-right.visible {
  animation: slide-right 0.5s ease forwards;
}

.animate-slide-left {
  opacity: 0;
  transform: translateX(20px);
}

.animate-slide-left.visible {
  animation: slide-left 0.5s ease forwards;
}

.animate-scale {
  opacity: 0;
  transform: scale(0.95);
}

.animate-scale.visible {
  animation: scale-in 0.5s ease forwards;
}

@keyframes scale-in {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

/* Staggered animation for children elements */
.stagger-children > *:nth-child(1) {
  animation-delay: 0.1s;
}

.stagger-children > *:nth-child(2) {
  animation-delay: 0.2s;
}

.stagger-children > *:nth-child(3) {
  animation-delay: 0.3s;
}

/* Optimize animations for mobile */
@media (max-width: 640px) {
  .animate-slide-up,
  .animate-slide-right,
  .animate-slide-left,
  .animate-scale {
    animation-duration: 0.4s;
  }
}

/* Respect user preferences for reduced motion */
@media (prefers-reduced-motion: reduce) {
  .animate-slide-up,
  .animate-slide-right,
  .animate-slide-left,
  .animate-scale {
    transition: opacity 0.1s ease;
    animation: none;
    opacity: 1;
    transform: none;
  }
}

@media (prefers-reduced-motion: reduce) {
  .features-animation *,
  .feature-card,
  .footer-section {
    transition-duration: 0.01ms !important;
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    scroll-behavior: auto !important;
    transform: none !important;
  }
}

================
File: src/trpc/query-client.ts
================
import {
  defaultShouldDehydrateQuery,
  QueryClient,
} from "@tanstack/react-query";
import SuperJSON from "superjson";

export const createQueryClient = () =>
  new QueryClient({
    defaultOptions: {
      queries: {
        // With SSR, we usually want to set some default staleTime
        // above 0 to avoid refetching immediately on the client
        staleTime: 30 * 1000,
      },
      dehydrate: {
        serializeData: SuperJSON.serialize,
        shouldDehydrateQuery: (query) =>
          defaultShouldDehydrateQuery(query) ||
          query.state.status === "pending",
      },
      hydrate: {
        deserializeData: SuperJSON.deserialize,
      },
    },
  });

================
File: src/trpc/react.tsx
================
"use client";

import { QueryClientProvider, QueryClient } from "@tanstack/react-query";
import {
  loggerLink,
  splitLink,
  unstable_httpBatchStreamLink,
  unstable_httpSubscriptionLink,
} from "@trpc/client";
import { createTRPCReact } from "@trpc/react-query";
import { inferRouterInputs, inferRouterOutputs } from "@trpc/server";
import { useState } from "react";
import SuperJSON from "superjson";

import { AppRouter } from "@/server/api/root";
import { createQueryClient } from "./query-client";

let clientQueryClientSingleton: QueryClient | undefined = undefined;
const getQueryClient = () => {
  if (typeof window === "undefined") {
    // Server: always make a new query client
    return createQueryClient();
  }
  // Browser: use singleton pattern to keep the same query client
  return (clientQueryClientSingleton ??= createQueryClient());
};

export const api = createTRPCReact<AppRouter>({
  overrides: {
    useMutation: {
      /**
       * This function is called whenever a `.useMutation` succeeds
       **/
      async onSuccess(opts) {
        /**
         * @note that order here matters:
         * The order here allows route changes in `onSuccess` without
         * having a flash of content change whilst redirecting.
         **/
        // Calls the `onSuccess` defined in the `useQuery()`-options:
        await opts.originalFn();
        // Invalidate all queries in the react-query cache:
        await opts.queryClient.invalidateQueries();
      },
    },
  },
});

/**
 * Inference helper for inputs.
 *
 * @example type HelloInput = RouterInputs['example']['hello']
 */
export type RouterInputs = inferRouterInputs<AppRouter>;

/**
 * Inference helper for outputs.
 *
 * @example type HelloOutput = RouterOutputs['example']['hello']
 */
export type RouterOutputs = inferRouterOutputs<AppRouter>;

export function TRPCReactProvider(props: { children: React.ReactNode }) {
  const queryClient = getQueryClient();

  const [trpcClient] = useState(() =>
    api.createClient({
      links: [
        loggerLink({
          enabled: (op) =>
            process.env.NODE_ENV === "development" ||
            (op.direction === "down" && op.result instanceof Error),
        }),
        splitLink({
          condition: (op) => op.type === "subscription",
          false: unstable_httpBatchStreamLink({
            transformer: SuperJSON,
            url: getBaseUrl() + "/api/trpc",
            headers: () => {
              const headers = new Headers();
              headers.set("x-trpc-source", "nextjs-react");
              return headers;
            },
          }),
          true: unstable_httpSubscriptionLink({
            transformer: SuperJSON,
            url: getBaseUrl() + "/api/trpc",
          }),
        }),
      ],
    }),
  );

  return (
    <QueryClientProvider client={queryClient}>
      <api.Provider client={trpcClient} queryClient={queryClient}>
        {props.children}
      </api.Provider>
    </QueryClientProvider>
  );
}

function getBaseUrl() {
  if (typeof window !== "undefined") return window.location.origin;
  if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`;
  return `http://localhost:${process.env.PORT ?? 3000}`;
}

================
File: src/trpc/server.ts
================
import "server-only";

import { createHydrationHelpers } from "@trpc/react-query/rsc";
import { headers } from "next/headers";
import { cache } from "react";

import { createCaller, AppRouter } from "@/server/api/root";
import { createTRPCContext } from "@/server/api/trpc";
import { createQueryClient } from "./query-client";

/**
 * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when
 * handling a tRPC call from a React Server Component.
 */
const createContext = cache(() => {
  const heads = new Headers(headers());
  heads.set("x-trpc-source", "rsc");

  return createTRPCContext({
    headers: heads,
  });
});

const getQueryClient = cache(createQueryClient);
const caller = createCaller(createContext);

export const { trpc: api, HydrateClient } = createHydrationHelpers<AppRouter>(
  caller,
  getQueryClient,
);

================
File: src/env.js
================
import { createEnv } from "@t3-oss/env-nextjs";
import { z } from "zod";

export const env = createEnv({
  /**
   * Specify your server-side environment variables schema here. This way you can ensure the app
   * isn't built with invalid env vars.
   */
  server: {
    NODE_ENV: z
      .enum(["development", "test", "production"])
      .default("development"),
    JWT_SECRET: z.string().min(1, "JWT_SECRET must be provided"),
    DATABASE_URL: z.string().min(1, "DATABASE_URL must be provided"),
  },

  /**
   * Specify your client-side environment variables schema here. This way you can ensure the app
   * isn't built with invalid env vars. To expose them to the client, prefix them with
   * `NEXT_PUBLIC_`.
   */
  client: {
    // NEXT_PUBLIC_CLIENTVAR: z.string(),
  },

  /**
   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.
   * middlewares) or client-side so we need to destruct manually.
   */
  runtimeEnv: {
    NODE_ENV: process.env.NODE_ENV,
    JWT_SECRET: process.env.JWT_SECRET,
    DATABASE_URL: process.env.DATABASE_URL,
    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,
  },
  /**
   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially
   * useful for Docker builds.
   */
  skipValidation: !!process.env.SKIP_ENV_VALIDATION,
  /**
   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and
   * `SOME_VAR=''` will throw an error.
   */
  emptyStringAsUndefined: true,
});

================
File: .gitignore
================
/node_modules
/.next/
/out/
next-env.d.ts
/build
.DS_Store
*.pem
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*
.env
.env*.local
*.env
.vercel
*.tsbuildinfo
.idea
.vscode/
coverage/
.nyc_output/
*.log
.turbo
dist/
.cache/
*.sqlite
*.sqlite3

================
File: next.config.js
================
/**
 * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially useful
 * for Docker builds.
 */
await import("./src/env.js");

/** @type {import("next").NextConfig} */
const config = {
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
};

export default config;

================
File: package.json
================
{
  "name": "alejandro-new-app",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "next build",
    "db:generate": "prisma migrate dev",
    "db:migrate": "prisma migrate deploy",
    "db:push": "prisma db push",
    "db:studio": "prisma studio",
    "dev": "next dev",
    "postinstall": "prisma generate",
    "typecheck": "tsc --noEmit",
    "lint": "eslint . -c .eslintrc.cjs --max-warnings 0",
    "lint:fix": "eslint . --fix -c .eslintrc.fix.cjs --max-warnings 0",
    "format": "prettier --write .",
    "start": "next start"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.1.5",
    "@headlessui/react": "^2.1.3",
    "@hookform/resolvers": "^3.9.0",
    "@prisma/client": "^5.14.0",
    "@t3-oss/env-nextjs": "^0.10.1",
    "@tanstack/react-query": "^5.50.0",
    "@trpc/client": "^11.0.0-rc.730",
    "@trpc/react-query": "^11.0.0-rc.730",
    "@trpc/server": "^11.0.0-rc.730",
    "ai": "^4.1.11",
    "bcrypt": "^5.1.1",
    "cookie": "^1.0.2",
    "dotenv": "^16.4.5",
    "geist": "^1.3.0",
    "jsonwebtoken": "^9.0.2",
    "next": "^14.2.4",
    "nodemon": "^3.1.4",
    "pm2": "^5.4.2",
    "react": "^18.3.1",
    "react-cookie": "^7.2.0",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-hot-toast": "^2.4.1",
    "react-intersection-observer": "^9.13.1",
    "server-only": "^0.0.1",
    "superjson": "^2.2.1",
    "tsx": "^4.19.0",
    "zod": "^3.23.3",
    "lucide-react": "^0.475.0"
  },
  "devDependencies": {
    "@stylistic/eslint-plugin-js": "^2.7.2",
    "@tanstack/eslint-plugin-query": "^5.59.7",
    "@types/bcrypt": "^5.0.2",
    "@types/cookie": "^0.6.0",
    "@types/eslint": "^8.56.10",
    "@types/jsonwebtoken": "^9.0.7",
    "@types/node": "^20.14.10",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@typescript-eslint/eslint-plugin": "^8.1.0",
    "@typescript-eslint/parser": "^8.1.0",
    "eslint": "^8.57.0",
    "eslint-config-next": "^14.2.4",
    "eslint-plugin-react": "^7.35.0",
    "eslint-plugin-react-server-components": "^1.2.0",
    "eslint-plugin-tailwindcss": "^3.17.4",
    "eslint-plugin-unused-imports": "^4.1.3",
    "postcss": "^8.4.39",
    "prettier": "^3.3.2",
    "prettier-plugin-tailwindcss": "^0.6.5",
    "prisma": "^5.14.0",
    "tailwindcss": "^3.4.3",
    "typescript": "^5.5.3"
  },
  "ct3aMetadata": {
    "initVersion": "7.37.0"
  },
  "packageManager": "npm@10.8.2"
}

================
File: postcss.config.cjs
================
const config = {
  plugins: {
    tailwindcss: {},
  },
};

module.exports = config;

================
File: prettier.config.js
================
/** @type {import('prettier').Config & import('prettier-plugin-tailwindcss').PluginOptions} */
const config = {
  plugins: ["prettier-plugin-tailwindcss"],
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: "all",
};

export default config;

================
File: tailwind.config.ts
================
import { Config } from "tailwindcss";
import { fontFamily } from "tailwindcss/defaultTheme";

export default {
  content: ["./src/**/*.tsx"],
  theme: {
    extend: {
      fontFamily: {
        sans: ["var(--font-geist-sans)", ...fontFamily.sans],
      },
    },
  },
  plugins: [],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    /* Base Options: */
    "esModuleInterop": true,
    "skipLibCheck": true,
    "target": "es2022",
    "allowJs": true,
    "resolveJsonModule": true,
    "moduleDetection": "force",
    "isolatedModules": true,

    /* Strictness */
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "checkJs": true,

    /* Bundled projects */
    "lib": ["dom", "dom.iterable", "ES2022"],
    "noEmit": true,
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "jsx": "preserve",
    "plugins": [{ "name": "next" }],
    "incremental": true,

    /* Path Aliases */
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": [
    ".eslintrc.cjs",
    ".eslintrc.fix.cjs",
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    "**/*.cjs",
    "**/*.js",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}



================================================================
End of Codebase
================================================================
