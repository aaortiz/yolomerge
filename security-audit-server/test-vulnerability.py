#!/usr/bin/env python3
# This file contains intentional security vulnerabilities for testing

import os
import subprocess
import pickle
import random
import sqlite3
import hashlib
import tempfile
from flask import Flask, request

# Vulnerability 1: OS Command Injection
def run_command(user_input):
    os.system("echo " + user_input)  # Security vulnerability: OS command injection
    return subprocess.check_output("ls " + user_input, shell=True)  # Another command injection

# Vulnerability 2: SQL Injection
def get_user(username):
    conn = sqlite3.connect('example.db')
    cursor = conn.cursor()
    # Security vulnerability: SQL injection
    query = "SELECT * FROM users WHERE username = '" + username + "'"
    cursor.execute(query)
    return cursor.fetchone()

# Vulnerability 3: Insecure Deserialization
def load_data(user_data):
    # Security vulnerability: Insecure deserialization
    return pickle.loads(user_data)

# Vulnerability 4: Hardcoded Credentials
def authenticate():
    username = "admin"
    password = "super_secret_password123"  # Security vulnerability: Hardcoded credentials
    return (username, password)

# Vulnerability 5: Weak Random Number Generation
def generate_token():
    # Security vulnerability: Weak random number generation
    return random.randrange(1000000)

# Vulnerability 6: Path Traversal
def read_file(filename):
    # Security vulnerability: Path traversal
    with open(filename, 'r') as file:
        return file.read()

# Vulnerability 7: Weak Cryptography
def hash_password(password):
    # Security vulnerability: Weak hashing algorithm (MD5)
    return hashlib.md5(password.encode()).hexdigest()

# Vulnerability 8: Insecure File Permissions
def write_sensitive_data(data):
    temp_file = tempfile.mktemp()  # Security vulnerability: Race condition in file creation
    with open(temp_file, 'w') as f:
        f.write(data)
    os.chmod(temp_file, 0o777)  # Security vulnerability: Overly permissive file permissions
    return temp_file

# Vulnerability 9: Flask app with debug mode enabled
app = Flask(__name__)
app.config['DEBUG'] = True  # Security vulnerability: Debug mode enabled in production

@app.route('/execute', methods=['POST'])
def execute_code():
    code = request.form.get('code')
    # Security vulnerability: Arbitrary code execution
    return eval(code)

if __name__ == "__main__":
    # This would start the Flask app if executed directly
    # app.run(host='0.0.0.0', debug=True)  # Security vulnerability: Exposed debug mode
    print("This file contains intentional security vulnerabilities for testing purposes.")